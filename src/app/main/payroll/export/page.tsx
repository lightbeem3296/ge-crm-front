"use client";

import { customAlert, CustomAlertType } from "@/components/ui/alert";
import FilterComponent from "@/components/ui/Filter";
import { myTheme } from "@/components/ui/theme/agGrid";
import { axiosHelper } from "@/lib/axios";
import { getRuleDisplay, getRuleMappings } from "@/services/ruleService";
import { ComparableFilterField, StringFilterField, ObjectFilterField, FilterType } from "@/types/filter";
import { fieldMapCodes, FieldMapItem, fieldMapMapping, PayrollExportFilterField, PayrollExportPreviewRequest, PayrollExportPreviewResponse, PayrollExportRequest } from "@/types/payroll";
import { extractKeys, lookupValue } from "@/utils/record";
import { faDownload, faPlus, faRefresh, faTrash } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { AllCommunityModule, ColDef, ModuleRegistry, Theme } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import { useEffect, useMemo, useRef, useState } from "react";

ModuleRegistry.registerModules([AllCommunityModule]);

export default function PayrollExportPage() {
  // State variables
  const [exportFileName, setExportFileName] = useState("payroll.csv");
  const [exportFieldMap, setExportFieldMap] = useState<FieldMapItem[]>(fieldMapCodes.map((key) => ({
    field: key,
    title: lookupValue(fieldMapMapping, key),
  })));

  const [filterName, setFilterName] = useState<StringFilterField>();
  const [filterMnr, setFilterMnr] = useState<ObjectFilterField>();
  const [filterEmploymentType, setFilterEmploymentType] = useState<ObjectFilterField>();
  const [filterComment, setFilterComment] = useState<StringFilterField>();
  const [filterMileageAllowance, setFilterMileageAllowance] = useState<StringFilterField>();
  const [filterLunch, setFilterLunch] = useState<ObjectFilterField>();
  const [filterDepartment, setFilterDepartment] = useState<StringFilterField>();
  const [filterTaxDeductionCard, setFilterTaxDeductionCard] = useState<ObjectFilterField>();
  const [filterApplicableRate, setFilterApplicableRate] = useState<ComparableFilterField>();
  const [filterPointsEarned, setFilterPointsEarned] = useState<ComparableFilterField>();
  const [filterPointsEarnedExtra, setFilterPointsEarnedExtra] = useState<ComparableFilterField>();
  const [filterPointsDeduction, setFilterPointsDeduction] = useState<ComparableFilterField>();
  const [filterFixedSalaryBonusKr, setFilterFixedSalaryBonusKr] = useState<ComparableFilterField>();
  const [filterFirstWorkDate, setFilterFirstWorkDate] = useState<ComparableFilterField>();
  const [filterLastWorkDate, setFilterLastWorkDate] = useState<ComparableFilterField>();
  const [filterHolidaySettlement, setFilterHolidaySettlement] = useState<StringFilterField>();
  const [filterEarnedPointsAutoGenerated, setFilterEarnedPointsAutoGenerated] = useState<ComparableFilterField>();
  const [filterSalaryType, setFilterSalaryType] = useState<ObjectFilterField>();
  const [filterRole, setFilterRole] = useState<ObjectFilterField>();
  const [filterStartPayPeriod, setFilterStartPayPeriod] = useState<ComparableFilterField>();
  const [filterEndPayPeriod, setFilterEndPayPeriod] = useState<ComparableFilterField>();
  const [filterLunchCode, setFilterLunchCode] = useState<StringFilterField>();
  const [filterLunchCodeJustification, setFilterLunchCodeJustification] = useState<StringFilterField>();
  const [filterPointsTotal, setFilterPointsTotal] = useState<ComparableFilterField>();
  const [filterPointsBonus, setFilterPointsBonus] = useState<ComparableFilterField>();
  const [filterTotalKr, setFilterTotalKr] = useState<ComparableFilterField>();
  const [filterTotalSalary, setFilterTotalSalary] = useState<ComparableFilterField>();
  const [filterAvailableOnAccount, setFilterAvailableOnAccount] = useState<ComparableFilterField>();
  const [filterPayrollCode, setFilterPayrollCode] = useState<StringFilterField>();
  const [filterAutoComments, setFilterAutoComments] = useState<StringFilterField>();
  const [filterCalculatedNormHours, setFilterCalculatedNormHours] = useState<ComparableFilterField>();

  const [exportRule, setExportRule] = useState("");
  const [exportRuleDiaplay, setExportRuleDisplay] = useState("");

  const gridRef = useRef<AgGridReact>(null);
  const [previewRows, setPreviewRows] = useState<Record<string, string>[]>([]);
  const [colDefs, setColDefs] = useState<ColDef[]>([]);

  const [ruleMappings, setRuleMappins] = useState<Record<string, string>>();
  const [ruleCodes, setRuleCodes] = useState<string[]>();

  const [exportLoading, setExportLoading] = useState<boolean>(false);
  const [previewLoading, setPreviewLoading] = useState<boolean>(false);

  // Hooks
  useEffect(() => {
    const updateRuleDisplay = async () => {
      if (exportRule != "") {
        const ruleDisplay = await getRuleDisplay(exportRule);
        if (ruleDisplay) {
          setExportRuleDisplay(ruleDisplay);
        }
      } else {
        setExportRuleDisplay("");
      }
    }
    updateRuleDisplay();
  }, [exportRule]);

  useEffect(() => {
    const fetchRuleMappings = async () => {
      const resp = await getRuleMappings();
      setRuleMappins(resp);
      setRuleCodes(extractKeys(resp));
    }
    fetchRuleMappings();
  }, []);

  // UI Handlers
  const handleChangeExportFileName = (fileName: string) => {
    setExportFileName(fileName);
  }

  const handleClickExport = async () => {
    try {
      setExportLoading(true);

      if (!exportFileName) {
        customAlert({
          type: CustomAlertType.ERROR,
          title: "Input Error",
          message: "Export filename is invalid.",
        });
        return;
      }

      await axiosHelper.download_post<PayrollExportRequest>("/payroll/export/download",
        {
          filename: exportFileName,
          field_map: exportFieldMap,
          filter: {
            name: filterName,
            m_nr: filterMnr,
            employment_type: filterEmploymentType,
            comment: filterComment,
            mileage_allowance: filterMileageAllowance,
            lunch: filterLunch,
            department: filterDepartment,
            tax_deduction_card: filterTaxDeductionCard,
            applicable_rate: filterApplicableRate,
            points_earned: filterPointsEarned,
            points_earned_extra: filterPointsEarnedExtra,
            points_deduction: filterPointsDeduction,
            fixed_salary_bonus_kr: filterFixedSalaryBonusKr,
            first_work_date: filterFirstWorkDate,
            last_work_date: filterLastWorkDate,
            holiday_settlement: filterHolidaySettlement,
            earned_points_auto_generated: filterEarnedPointsAutoGenerated,
            salary_type: filterSalaryType,
            role: filterRole,
            start_pay_period: filterStartPayPeriod,
            end_pay_period: filterEndPayPeriod,
            lunch_code: filterLunchCode,
            lunch_code_justification: filterLunchCodeJustification,
            points_total: filterPointsTotal,
            points_bonus: filterPointsBonus,
            total_kr: filterTotalKr,
            total_salary: filterTotalSalary,
            available_on_account: filterAvailableOnAccount,
            payroll_code: filterPayrollCode,
            auto_comments: filterAutoComments,
            calculated_norm_hours: filterCalculatedNormHours,
          },
          rule: exportRule || undefined,
        });
    } finally {
      setExportLoading(false);
    }
  }

  const handleClickAddFieldMapItem = () => {
    setExportFieldMap([
      ...exportFieldMap,
      {
        field: "username",
        title: "Username",
      }
    ]);
  }

  const handleClickDeleteFieldMapItem = (delete_index: number) => {
    setExportFieldMap(exportFieldMap.filter((item, index) => index !== delete_index));
  }

  const handleChangeFieldMapField = (change_index: number, value: string) => {
    setExportFieldMap(
      exportFieldMap.map((item, item_index) => (
        item_index === change_index
          ? {
            field: value,
            title: lookupValue(fieldMapMapping, value),
          }
          : item))
    );
  }

  const handleChangeFieldMapTitle = (change_index: number, value: string) => {
    setExportFieldMap(
      exportFieldMap.map((item, item_index) => (
        item_index === change_index
          ? {
            ...item,
            title: value,
          }
          : item))
    );
  }

  const handleClickPreviewRefresh = async () => {
    await refreshPreviewTable();
  }

  // Table Functions
  const refreshPreviewTable = async () => {
    try {
      setPreviewLoading(true);
      const response = await axiosHelper.post<PayrollExportPreviewRequest, PayrollExportPreviewResponse>("/payroll/export/preview", {
        field_map: exportFieldMap,
        filter: {
          name: filterName,
          m_nr: filterMnr,
          employment_type: filterEmploymentType,
          comment: filterComment,
          mileage_allowance: filterMileageAllowance,
          lunch: filterLunch,
          department: filterDepartment,
          tax_deduction_card: filterTaxDeductionCard,
          applicable_rate: filterApplicableRate,
          points_earned: filterPointsEarned,
          points_earned_extra: filterPointsEarnedExtra,
          points_deduction: filterPointsDeduction,
          fixed_salary_bonus_kr: filterFixedSalaryBonusKr,
          first_work_date: filterFirstWorkDate,
          last_work_date: filterLastWorkDate,
          holiday_settlement: filterHolidaySettlement,
          earned_points_auto_generated: filterEarnedPointsAutoGenerated,
          salary_type: filterSalaryType,
          role: filterRole,
          start_pay_period: filterStartPayPeriod,
          end_pay_period: filterEndPayPeriod,
          lunch_code: filterLunchCode,
          lunch_code_justification: filterLunchCodeJustification,
          points_total: filterPointsTotal,
          points_bonus: filterPointsBonus,
          total_kr: filterTotalKr,
          total_salary: filterTotalSalary,
          available_on_account: filterAvailableOnAccount,
          payroll_code: filterPayrollCode,
          auto_comments: filterAutoComments,
          calculated_norm_hours: filterCalculatedNormHours,
        },
        rule: exportRule || undefined,
      });
      if (response) {
        if (response.preview_content.length > 0) {
          const headers = extractKeys(response.preview_content[0]);
          setColDefs(headers.map((header) => (
            {
              headerName: header,
              field: header,
            }
          )));
          setPreviewRows(response.preview_content);
        } else {
          setColDefs([]);
          setPreviewRows([]);
        }
      }
    } finally {
      setPreviewLoading(false);
    }
  }

  const theme = useMemo<Theme | "legacy">(() => {
    return myTheme();
  }, []);

  const defaultColDef: ColDef = {
    filter: true,
  };

  return (
    <div>
      <div className="flex justify-between px-2 py-4">
        <p className="text-lg font-medium text-base-content/80">
          Payroll Export
        </p>
        <div className="flex justify-end gap-2">
          <input
            className="input input-sm input-bordered"
            value={exportFileName}
            placeholder="Export filename"
            onChange={(e) => handleChangeExportFileName(e.target.value)}
          />
          <button
            className="btn btn-sm btn-info text-gray-100"
            onClick={() => handleClickExport()}
          >
            {exportLoading
              ? <span className="loading loading-spinner loading-xs"></span>
              : <FontAwesomeIcon icon={faDownload} width={12} />
            }
            Export
          </button>
        </div>
      </div>
      <div className="overflow-auto grid grid-cols-1 sm:grid-cols-3 gap-2">

        {/* Field Map */}
        <div className="col-span-1 border border-base-content/20 rounded-md p-4">
          <div className="text-md font-medium text-base-content h-12 flex justify-between items-center">
            Field Map
            <button
              className="btn btn-sm btn-primary btn-outline text-gray-100"
              onClick={() => handleClickAddFieldMapItem()}
            >
              <FontAwesomeIcon icon={faPlus} width={12} />Add
            </button>
          </div>
          <div className="flex flex-col gap-2 max-h-80 border border-base-content/20 rounded-md p-4 overflow-auto">
            {exportFieldMap.map((fieldMapItem, item_index) => (
              <div key={item_index} className="grid grid-cols-5 gap-2">
                <select
                  className="select select-bordered select-sm col-span-2"
                  value={fieldMapItem.field}
                  onChange={(e) => handleChangeFieldMapField(item_index, e.target.value)}
                >
                  <option disabled value="">Select a field</option>
                  {fieldMapCodes.map((key) => (
                    <option key={key} value={key}>
                      {lookupValue(fieldMapMapping, key)}
                    </option>
                  ))}
                </select>
                <input
                  className="input input-sm input-bordered col-span-2"
                  value={fieldMapItem.title}
                  onChange={(e) => handleChangeFieldMapTitle(item_index, e.target.value)}
                />
                <button
                  className="btn btn-sm btn-error btn-outline col-span-1"
                  onClick={() => handleClickDeleteFieldMapItem(item_index)}
                >
                  <FontAwesomeIcon icon={faTrash} width={12} />
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Filter */}
        <div className="col-span-1 border border-base-content/20 rounded-md p-4">
          <div className="text-md font-medium text-base-content h-12 flex justify-between items-center">
            Filter
          </div>
          <div className="flex flex-col gap-2 max-h-80 border border-base-content/20 rounded-md p-4 overflow-auto">
            <FilterComponent
              field={PayrollExportFilterField.NAME}
              label="Name"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterName}
            />
            <FilterComponent
              field={PayrollExportFilterField.M_NR}
              label="M-Nr"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterMnr}
            />
            <FilterComponent
              field={PayrollExportFilterField.EMPLOYMENT_TYPE}
              label="Employment Type"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterEmploymentType}
            />
            <FilterComponent
              field={PayrollExportFilterField.COMMENT}
              label="Comment"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterComment}
            />
            <FilterComponent
              field={PayrollExportFilterField.MILEAGE_ALLOWANCE}
              label="Mileage Allowance"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterMileageAllowance}
            />
            <FilterComponent
              field={PayrollExportFilterField.LUNCH}
              label="Lunch"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterLunch}
            />
            <FilterComponent
              field={PayrollExportFilterField.DEPARTMENT}
              label="Department"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterDepartment}
            />
            <FilterComponent
              field={PayrollExportFilterField.TAX_DEDUCTION_CARD}
              label="Tax Card"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterTaxDeductionCard}
            />
            <FilterComponent
              field={PayrollExportFilterField.APPLICABLE_RATE}
              label="Applicable Rate"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterApplicableRate}
            />
            <FilterComponent
              field={PayrollExportFilterField.POINTS_EARNED}
              label="Points Earned"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterPointsEarned}
            />
            <FilterComponent
              field={PayrollExportFilterField.POINTS_EARNED_EXTRA}
              label="Points Earned Extra"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterPointsEarnedExtra}
            />
            <FilterComponent
              field={PayrollExportFilterField.POINTS_DEDUCTION}
              label="Points Deduction"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterPointsDeduction}
            />
            <FilterComponent
              field={PayrollExportFilterField.FIXED_SALARY_BONUS_KR}
              label="Fixed Salary Bonus"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterFixedSalaryBonusKr}
            />
            <FilterComponent
              field={PayrollExportFilterField.FIRST_WORK_DATE}
              label="First Work Date"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterFirstWorkDate}
            />
            <FilterComponent
              field={PayrollExportFilterField.LAST_WORK_DATE}
              label="Last Work Date"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterLastWorkDate}
            />
            <FilterComponent
              field={PayrollExportFilterField.HOLIDAY_SETTLEMENT}
              label="Holiday Settlement"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterHolidaySettlement}
            />
            <FilterComponent
              field={PayrollExportFilterField.EARNED_POINTS_AUTO_GENERATED}
              label="Earned Points Autogenerated"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterEarnedPointsAutoGenerated}
            />
            <FilterComponent
              field={PayrollExportFilterField.SALARY_TYPE}
              label="Salary Type"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterSalaryType}
            />
            <FilterComponent
              field={PayrollExportFilterField.ROLE}
              label="Role"
              type={FilterType.OBJECT_FILTER}
              setFilterField={setFilterRole}
            />
            <FilterComponent
              field={PayrollExportFilterField.START_PAY_PERIOD}
              label="Start Pay Period"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterStartPayPeriod}
            />
            <FilterComponent
              field={PayrollExportFilterField.END_PAY_PERIOD}
              label="End Pay Period"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterEndPayPeriod}
            />
            <FilterComponent
              field={PayrollExportFilterField.LUNCH_CODE}
              label="Lunch Code"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterLunchCode}
            />
            <FilterComponent
              field={PayrollExportFilterField.LUNCH_CODE_JUSTIFICATION}
              label="Lunch Code Justification"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterLunchCodeJustification}
            />
            <FilterComponent
              field={PayrollExportFilterField.POINTS_TOTAL}
              label="Points Total"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterPointsTotal}
            />
            <FilterComponent
              field={PayrollExportFilterField.POINTS_BONUS}
              label="Points Bonus"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterPointsBonus}
            />
            <FilterComponent
              field={PayrollExportFilterField.TOTAL_KR}
              label="Total KR"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterTotalKr}
            />
            <FilterComponent
              field={PayrollExportFilterField.TOTAL_SALARY}
              label="Total Salary"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterTotalSalary}
            />
            <FilterComponent
              field={PayrollExportFilterField.AVAILABLE_ON_ACCOUNT}
              label="Available on Account"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterAvailableOnAccount}
            />
            <FilterComponent
              field={PayrollExportFilterField.PAYROLL_CODE}
              label="Payroll Code"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterPayrollCode}
            />
            <FilterComponent
              field={PayrollExportFilterField.AUTO_COMMENTS}
              label="Auto Comments"
              type={FilterType.STRING_FILTER}
              setFilterField={setFilterAutoComments}
            />
            <FilterComponent
              field={PayrollExportFilterField.CALCULATED_NORM_HOURS}
              label="Calculated Norm Hours"
              type={FilterType.COMPARIBLE_FILTER}
              setFilterField={setFilterCalculatedNormHours}
            />
          </div>
        </div>

        {/* Rule */}
        <div className="col-span-1 border border-base-content/20 rounded-md p-4">
          <div className="text-md font-medium text-base-content h-12 flex justify-between items-center">
            Rule
          </div>
          <div className="flex flex-col gap-2 h-80 rounded-md">
            <select
              className="select select-bordered select-sm w-full"
              value={exportRule}
              onChange={(e) => setExportRule(e.target.value)}
            >
              <option value="">Not Selected</option>
              {ruleCodes?.map((key) => (
                <option key={key} value={key}>{lookupValue(ruleMappings, key)}</option>
              ))}
            </select>
            <textarea
              className="textarea textarea-bordered text-xs resize-none font-mono grow"
              placeholder="Rule display"
              value={exportRuleDiaplay}
              readOnly
            />
          </div>
        </div>

        {/* Preview */}
        <div className="col-span-1 sm:col-span-3 border border-base-content/20 rounded-md p-4">
          <div className="text-md font-medium text-base-content h-12 flex justify-between items-center">
            Preview
            <button
              className="btn btn-sm btn-info btn-outline"
              onClick={() => handleClickPreviewRefresh()}
            >
              {
                previewLoading
                  ? <span className="loading loading-spinner loading-xs"></span>
                  : <FontAwesomeIcon icon={faRefresh} width={12} />
              }
              Refresh
            </button>
          </div>
          <div className="overflow-auto">
            <div className="h-[20rem] min-w-[600px] min-h-[450px]">
              <AgGridReact
                ref={gridRef}
                columnDefs={colDefs}
                rowData={previewRows}
                theme={theme}
                defaultColDef={defaultColDef}
                pagination={true}
                paginationPageSize={10}
                paginationPageSizeSelector={[10, 25, 50]}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
